name: EC2 배포 (DuckDNS) - Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    name: 빌드 및 배포 (프로덕션)
    runs-on: ubuntu-latest
    
    steps:
    - name: 소스코드 체크아웃
      uses: actions/checkout@v3
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v2
      
    # 필요한 파일들 존재 확인
    - name: 배포 파일 존재 확인
      run: |
        echo "필요한 파일들 존재 확인..."
        required_files=("docker-compose.yml" "deploy.sh" "hospital_main/Dockerfile")
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file 존재"
          else
            echo "❌ $file 누락!"
            echo "현재 디렉토리 구조:"
            ls -la
            exit 1
          fi
        done
      
    - name: 백엔드 도커 이미지 빌드
      run: |
        cd hospital_main
        echo "🔨 백엔드 Docker 이미지 빌드 중..."
        
        # 빌드 과정에서 에러 발생시 로그 확인 가능하도록 설정
        docker build --no-cache --progress=plain -t hospital-backend:${{ github.sha }} . 2>&1 | tee build.log
        
        if [ $? -eq 0 ]; then
          docker tag hospital-backend:${{ github.sha }} hospital-backend:latest
          echo "✅ 백엔드 이미지 생성 완료"
          docker images | grep hospital-backend
        else
          echo "❌ Docker 빌드 실패!"
          cat build.log
          exit 1
        fi
        
    - name: 도커 이미지 압축 및 저장
      run: |
        echo "💾 Docker 이미지 압축 중..."
        
        # 이미지 존재 확인
        if docker images | grep -q hospital-backend:latest; then
          docker save hospital-backend:latest | gzip > backend.tar.gz
          
          # 이미지 크기 확인 (너무 크면 SCP 실패 가능성 경고)
          SIZE=$(ls -l backend.tar.gz | awk '{print $5}')
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "압축된 이미지 크기: ${SIZE_MB}MB"
          
          if [ $SIZE_MB -gt 500 ]; then
            echo "⚠️ 경고: 이미지가 500MB를 초과합니다. SCP 전송이 느릴 수 있습니다."
          fi
          
          echo "✅ 이미지 압축 완료"
        else
          echo "❌ hospital-backend:latest 이미지가 존재하지 않습니다!"
          docker images
          exit 1
        fi

    # 연결 테스트 추가
    - name: EC2 서버 연결 테스트
      run: |
        echo "🔍 EC2 서버 연결 테스트..."
        
        # 기본 연결성 확인
        if timeout 10 bash -c "</dev/tcp/${{ secrets.EC2_HOST }}/22"; then
          echo "✅ EC2 서버 SSH 포트(22) 연결 가능"
        else
          echo "❌ EC2 서버 SSH 연결 실패 - 보안 그룹 또는 네트워크 설정 확인 필요"
          exit 1
        fi
        
    - name: 배포 파일들을 EC2 서버로 전송
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "backend.tar.gz,docker-compose.yml,deploy.sh"
        target: "/home/ec2-user/"
        timeout: 600s
        command_timeout: 600s
        use_insecure_cipher: false
        debug: true

    # SCP 실패시 대체 방법
    - name: SCP 실패시 SSH를 통한 연결 테스트
      if: failure()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        timeout: 60s
        script: |
          echo "SSH 연결 테스트 - 기본 명령어 실행"
          whoami
          pwd
          df -h
          echo "SSH 연결은 정상이지만 SCP 전송에 문제가 있습니다."

    - name: EC2 서버 기본 환경 설정
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        timeout: 600s
        script: |
          echo "🔄 기본 환경 설정 시작..."
          
          # 전송된 파일 확인
          echo "📋 전송된 파일 확인:"
          ls -la /home/ec2-user/
          
          # 시스템 업데이트 (필수만)
          echo "📦 필수 패키지 설치..."
          sudo yum update -y
          sudo yum install -y wget curl git htop
          
          # Docker 설치 확인
          if ! command -v docker &> /dev/null; then
            echo "🐳 Docker 설치 중..."
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
            echo "✅ Docker 설치 완료"
          else
            echo "✅ Docker 이미 설치됨: $(docker --version)"
          fi
          
          # Docker Compose 설치 확인
          if ! command -v docker-compose &> /dev/null; then
            echo "🔧 Docker Compose 설치 중..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "✅ Docker Compose 설치 완료"
          else
            echo "✅ Docker Compose 이미 설치됨: $(docker-compose --version)"
          fi
          
          echo "✅ 기본 환경 설정 완료"
        
    - name: EC2 서버에 DuckDNS로 배포 (프로덕션)
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: GITHUB_SHA
        timeout: 600s
        script: |
          echo "🚀 병원 프로젝트 프로덕션 배포 시작..."
          
          # 필수 파일 존재 확인
          required_files=("backend.tar.gz" "docker-compose.yml" "deploy.sh")
          for file in "${required_files[@]}"; do
            if [ ! -f "/home/ec2-user/$file" ]; then
              echo "❌ 필수 파일 $file이 없습니다!"
              exit 1
            fi
          done
          
          # Docker 이미지 로드
          echo "📦 Docker 이미지 로드 중..."
          if docker load < /home/ec2-user/backend.tar.gz; then
            echo "✅ Docker 이미지 로드 완료"
            docker images | grep hospital-backend
          else
            echo "❌ Docker 이미지 로드 실패"
            exit 1
          fi
          
          # 필요한 디렉토리 생성
          sudo mkdir -p /opt/hospital/{config,data,logs}
          sudo chown -R ec2-user:ec2-user /opt/hospital/
          
          # .env 파일 생성 (프로덕션용)
          cat > .env << EOF
          ENVIRONMENT=production
          IMAGE_TAG=latest
          
          # 백엔드 설정
          BACKEND_HOST=hospital-backend
          BACKEND_PORT=8888
          
          # 데이터베이스 설정
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=3500
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          
          # DuckDNS 설정 (프로덕션)
          DUCKDNS_DOMAIN=${{ secrets.DUCKDNS_DOMAIN }}
          DUCKDNS_SUBDOMAIN=${{ secrets.DUCKDNS_SUBDOMAIN }}
          DUCKDNS_TOKEN=${{ secrets.DUCKDNS_TOKEN }}
          
          # API 키 설정
          HOSPITAL_MAIN_API_KEY=${{ secrets.HOSPITAL_MAIN_API_KEY }}
          HOSPITAL_DETAIL_API_KEY=${{ secrets.HOSPITAL_DETAIL_API_KEY }}
          HOSPITAL_MEDICAL_SUBJECT_API_KEY=${{ secrets.HOSPITAL_MEDICAL_SUBJECT_API_KEY }}
          HOSPITAL_PRODOC_API_KEY=${{ secrets.HOSPITAL_PRODOC_API_KEY }}
          HOSPITAL_PHARMACY_API_KEY=${{ secrets.HOSPITAL_PHARMACY_API_KEY }}
          HOSPITAL_EMERGENCY_API_KEY=${{ secrets.HOSPITAL_EMERGENCY_API_KEY }}
          API_ADMIN_KEY=${{ secrets.API_ADMIN_KEY }}
          
          # API Base URL 설정
          HOSPITAL_MAIN_API_BASE_URL=${{ secrets.HOSPITAL_MAIN_API_BASE_URL }}
          HOSPITAL_DETAIL_API_BASE_URL=${{ secrets.HOSPITAL_DETAIL_API_BASE_URL }}
          HOSPITAL_MEDICAL_SUBJECT_API_BASE_URL=${{ secrets.HOSPITAL_MEDICAL_SUBJECT_API_BASE_URL }}
          HOSPITAL_PRODOC_API_BASE_URL=${{ secrets.HOSPITAL_PRODOC_API_BASE_URL }}
          HOSPITAL_PHARMACY_API_BASE_URL=${{ secrets.HOSPITAL_PHARMACY_API_BASE_URL }}
          HOSPITAL_EMERGENCY_API_BASE_URL=${{ secrets.HOSPITAL_EMERGENCY_API_BASE_URL }}
          
          EOF
           
          # 환경변수 확인
          echo "📋 프로덕션 배포 환경 설정:"
          echo "  환경: production"
          echo "  DuckDNS 도메인: ${{ secrets.DUCKDNS_DOMAIN }}"
          echo "  백엔드 포트: 8888"
          echo "  DB 포트: 3500"
          
          # 배포 스크립트 실행
          chmod +x /home/ec2-user/deploy.sh
          
          echo "▶️ 배포 스크립트 실행..."
          if /home/ec2-user/deploy.sh; then
            echo "✅ 배포 성공"
          else
            echo "❌ 배포 실패"
            exit 1
          fi
          
          # 임시 파일 정리
          echo "🧹 임시 파일 정리..."
          rm -f /home/ec2-user/backend.tar.gz
          
          echo "✅ 프로덕션 배포 완료!"
          
    - name: 서비스 상태 확인 및 헬스체크
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        timeout: 300s
        script: |
          echo "🏥 프로덕션 서비스 헬스체크 시작..."
          
          # 컨테이너 상태 확인
          echo "📊 컨테이너 상태:"
          if [ -f /home/ec2-user/docker-compose.yml ]; then
            docker-compose -f /home/ec2-user/docker-compose.yml ps
          else
            echo "docker-compose.yml 파일이 없습니다. 실행 중인 컨테이너:"
            docker ps
          fi
          
          # DuckDNS 도메인으로 백엔드 API 확인
          TARGET_URL="http://${{ secrets.DUCKDNS_DOMAIN }}:8888"
          echo "🔍 백엔드 API 응답 테스트 ($TARGET_URL)..."
          
          BACKEND_OK=false
          for i in {1..12}; do
            echo "  시도 $i/12..."
            
            if curl -f -s --connect-timeout 10 "$TARGET_URL/actuator/health" > /dev/null 2>&1; then
              echo "✅ 백엔드 API: 정상"
              BACKEND_OK=true
              break
            else
              echo "⏳ 백엔드 시작 대기 중..."
              sleep 10
            fi
          done
          
          if [ "$BACKEND_OK" = false ]; then
            echo "⚠️ 백엔드 API 응답 확인 실패"
            echo "컨테이너 로그 확인:"
            docker logs $(docker ps --filter "name=hospital-backend" --format "{{.Names}}") --tail=20 || echo "백엔드 컨테이너 로그를 가져올 수 없습니다."
          fi
          
          # 최종 결과
          echo ""
          echo "🎉 프로덕션 배포 완료!"
          echo "📍 접속 정보:"
          echo "  🔧 백엔드 API: $TARGET_URL"
          echo "  🌍 DuckDNS 도메인: ${{ secrets.DUCKDNS_DOMAIN }}"
          
    - name: 배포 실패 시 롤백 처리
      if: failure()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        timeout: 180s
        script: |
          echo "❌ 프로덕션 배포 실패! 롤백 시도..."
          
          # 실행 중인 컨테이너 확인 및 중지
          if [ -f /home/ec2-user/docker-compose.yml ]; then
            docker-compose -f /home/ec2-user/docker-compose.yml down || true
            
            # 로그 확인
            echo "📝 최근 로그:"
            docker-compose -f /home/ec2-user/docker-compose.yml logs --tail=50 || true
          else
            echo "실행 중인 모든 컨테이너 중지:"
            docker stop $(docker ps -q) || true
          fi
          
          # 임시 파일 정리
          rm -f /home/ec2-user/*.tar.gz
          
          echo "🔄 수동으로 문제를 확인하고 해결하세요."
