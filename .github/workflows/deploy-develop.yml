name: EC2 배포 (DuckDNS + 모니터링) 

on:
  push:
    branches: [ Develop ]
  workflow_dispatch:

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    name: 빌드 및 배포
    runs-on: ubuntu-latest
    
    steps:
    - name: 소스코드 체크아웃
      uses: actions/checkout@v3
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v2
      
    - name: 백엔드 도커 이미지 빌드
      run: |
        cd hospital_main
        echo "🔨 백엔드 Docker 이미지 빌드 중..."
        docker build --no-cache -t hospital-backend:${{ github.sha }} .
        docker tag hospital-backend:${{ github.sha }} hospital-backend:latest
        echo "✅ 백엔드 이미지 생성 완료"
        
    - name: 도커 이미지 압축 및 저장
      run: |
        echo "💾 Docker 이미지 압축 중..."
        docker save hospital-backend:latest | gzip > backend.tar.gz
        
        # 이미지 크기 확인
        ls -lh *.tar.gz
        echo "✅ 이미지 압축 완료"
        
    - name: 배포 파일들을 EC2 서버로 전송
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "backend.tar.gz,docker-compose.prod.yml,deploy.sh"
        target: "/home/ec2-user/"
        
    - name: EC2 서버에 DuckDNS로 배포
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          echo "🚀 병원 프로젝트 DuckDNS 배포 시작..."
          
          # Docker 이미지 로드
          echo "📦 Docker 이미지 로드 중..."
          docker load < /home/ec2-user/backend.tar.gz
          
          # 필요한 디렉토리 생성
          sudo mkdir -p /opt/hospital/config/duckdns
          sudo mkdir -p /opt/hospital/monitoring/prometheus/config
          sudo mkdir -p /opt/hospital/monitoring/prometheus/data
          sudo mkdir -p /opt/hospital/monitoring/grafana/data
          sudo mkdir -p /opt/hospital/monitoring/grafana/provisioning/dashboards
          sudo mkdir -p /opt/hospital/monitoring/grafana/provisioning/datasources
          sudo chown -R ec2-user:ec2-user /opt/hospital/
          
          # .env 파일 생성
          cat > .env << EOF
          ENVIRONMENT=production
          IMAGE_TAG=latest
          
          # 데이터베이스 설정
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=3500
          
          # 백엔드 설정
          BACKEND_HOST=hospital-backend
          BACKEND_PORT=8888
          
          # DuckDNS 설정
          DUCKDNS_DOMAIN=${{ secrets.DUCKDNS_DOMAIN }}
          DUCKDNS_SUBDOMAIN=${{ secrets.DUCKDNS_SUBDOMAIN }}
          DUCKDNS_TOKEN=${{ secrets.DUCKDNS_TOKEN }}
          
          # 모니터링 설정
          PROMETHEUS_PORT=9090
          GRAFANA_PORT=3000
          GRAFANA_ADMIN_USER=admin
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          
          # 병원/약국 API 키 설정
          HOSPITAL_MAIN_API_KEY=${{ secrets.HOSPITAL_MAIN_API_KEY }}
          HOSPITAL_DETAIL_API_KEY=${{ secrets.HOSPITAL_DETAIL_API_KEY }}
          HOSPITAL_MEDICAL_SUBJECT_API_KEY=${{ secrets.HOSPITAL_MEDICAL_SUBJECT_API_KEY }}
          HOSPITAL_PRODOC_API_KEY=${{ secrets.HOSPITAL_PRODOC_API_KEY }}
          HOSPITAL_PHARMACY_API_KEY=${{ secrets.HOSPITAL_PHARMACY_API_KEY }}
          HOSPITAL_EMERGENCY_API_KEY=${{ secrets.HOSPITAL_EMERGENCY_API_KEY }}
          API_ADMIN_KEY=${{ secrets.API_ADMIN_KEY }}
          
          # 병원/약국 API Base URL 설정
          HOSPITAL_MAIN_API_BASE_URL=${{ secrets.HOSPITAL_MAIN_API_BASE_URL }}
          HOSPITAL_DETAIL_API_BASE_URL=${{ secrets.HOSPITAL_DETAIL_API_BASE_URL }}
          HOSPITAL_MEDICAL_SUBJECT_API_BASE_URL=${{ secrets.HOSPITAL_MEDICAL_SUBJECT_API_BASE_URL }}
          HOSPITAL_PRODOC_API_BASE_URL=${{ secrets.HOSPITAL_PRODOC_API_BASE_URL }}
          HOSPITAL_PHARMACY_API_BASE_URL=${{ secrets.HOSPITAL_PHARMACY_API_BASE_URL }}
          HOSPITAL_EMERGENCY_API_BASE_URL=${{ secrets.HOSPITAL_EMERGENCY_API_BASE_URL }}
          
          # 데이터베이스 설정
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          EOF
          
          # 프로메테우스 설정 파일 생성
          cat > /opt/hospital/monitoring/prometheus/config/prometheus.yml << 'PROMETHEUS_CONFIG'
          global:
            scrape_interval: 15s
            evaluation_interval: 15s
          
          rule_files:
            # - "first_rules.yml"
            # - "second_rules.yml"
          
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
          
            - job_name: 'hospital-backend'
              static_configs:
                - targets: ['hospital-backend:8888']
              metrics_path: '/actuator/prometheus'
              scrape_interval: 30s
          
            - job_name: 'mariadb'
              static_configs:
                - targets: ['hospital-mariadb:3306']
              scrape_interval: 30s
          
            - job_name: 'docker'
              static_configs:
                - targets: ['host.docker.internal:9323']
              scrape_interval: 30s
          
            - job_name: 'node-exporter'
              static_configs:
                - targets: ['node-exporter:9100']
              scrape_interval: 30s
          PROMETHEUS_CONFIG
          
          # 그라파나 데이터소스 설정 파일 생성
          cat > /opt/hospital/monitoring/grafana/provisioning/datasources/prometheus.yml << 'DATASOURCE_CONFIG'
          apiVersion: 1
          
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://prometheus:9090
              isDefault: true
              editable: true
          DATASOURCE_CONFIG
          
          # 그라파나 대시보드 프로비저닝 설정
          cat > /opt/hospital/monitoring/grafana/provisioning/dashboards/dashboard.yml << 'DASHBOARD_CONFIG'
          apiVersion: 1
          
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /var/lib/grafana/dashboards
          DASHBOARD_CONFIG
           
          # 환경변수 확인
          echo "📋 배포 환경 설정:"
          echo "  환경: production"
          echo "  DuckDNS 도메인: ${{ secrets.DUCKDNS_DOMAIN }}"
          echo "  DuckDNS 서브도메인: ${{ secrets.DUCKDNS_SUBDOMAIN }}"
          echo "  백엔드 포트: 8888"
          echo "  DB 포트: 3500"
          echo "  프로메테우스 포트: 9090"
          echo "  그라파나 포트: 3000"
          
          # 배포 스크립트 실행 권한 부여
          chmod +x /home/ec2-user/deploy.sh
          
          # 배포 실행
          echo "▶️ 배포 스크립트 실행..."
          /home/ec2-user/deploy.sh
          
          # 모니터링 스택 설치
          echo "📊 모니터링 스택 설치 중..."
          
          # Node Exporter 실행
          docker run -d \
            --name node-exporter \
            --restart unless-stopped \
            --network hospital-network \
            -p 9100:9100 \
            -v /proc:/host/proc:ro \
            -v /sys:/host/sys:ro \
            -v /:/rootfs:ro \
            --pid host \
            prom/node-exporter:latest \
            --path.procfs=/host/proc \
            --path.rootfs=/rootfs \
            --path.sysfs=/host/sys \
            --collector.filesystem.mount-points-exclude='^/(sys|proc|dev|host|etc)($$|/)'
          
          # 프로메테우스 실행
          docker run -d \
            --name prometheus \
            --restart unless-stopped \
            --network hospital-network \
            -p 9090:9090 \
            -v /opt/hospital/monitoring/prometheus/config:/etc/prometheus \
            -v /opt/hospital/monitoring/prometheus/data:/prometheus \
            --user "$(id -u):$(id -g)" \
            prom/prometheus:latest \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/prometheus \
            --web.console.libraries=/etc/prometheus/console_libraries \
            --web.console.templates=/etc/prometheus/consoles \
            --storage.tsdb.retention.time=200h \
            --web.enable-lifecycle
          
          # 그라파나 실행
          docker run -d \
            --name grafana \
            --restart unless-stopped \
            --network hospital-network \
            -p 3000:3000 \
            -v /opt/hospital/monitoring/grafana/data:/var/lib/grafana \
            -v /opt/hospital/monitoring/grafana/provisioning:/etc/grafana/provisioning \
            -e GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin} \
            -e GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin} \
            -e GF_INSTALL_PLUGINS=grafana-piechart-panel \
            --user "$(id -u):$(id -g)" \
            grafana/grafana:latest
          
          sleep 10
          
          echo "✅ 모니터링 스택 설치 완료!"
          
          # 임시 파일 정리
          echo "🧹 임시 파일 정리..."
          rm -f /home/ec2-user/*.tar.gz
          
          echo "✅ 배포 완료!"
          
    - name: 서비스 상태 확인 및 헬스체크
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          echo "🏥 서비스 헬스체크 시작..."
          
          # 컨테이너 상태 확인
          echo "📊 컨테이너 상태:"
          docker-compose -f /home/ec2-user/docker-compose.prod.yml ps
          echo ""
          echo "📊 모니터링 컨테이너 상태:"
          docker ps --filter name=prometheus --filter name=grafana --filter name=node-exporter
          
          # DuckDNS 도메인으로 백엔드 API 확인
          TARGET_URL="http://${{ secrets.DUCKDNS_DOMAIN }}:8888"
          echo "🔍 백엔드 API 응답 테스트 ($TARGET_URL)..."
          
          for i in {1..12}; do
            echo "  시도 $i/12..."
            
            if curl -f -s --connect-timeout 10 "$TARGET_URL/api/proDoc/status" > /dev/null 2>&1; then
              echo "✅ 백엔드 API: 정상"
              BACKEND_OK=true
              break
            else
              echo "⏳ 백엔드 시작 대기 중..."
              sleep 10
            fi
          done
          
          # 프로메테우스 헬스체크
          PROMETHEUS_URL="http://${{ secrets.DUCKDNS_DOMAIN }}:9090"
          echo "🔍 프로메테우스 헬스체크 ($PROMETHEUS_URL)..."
          
          for i in {1..6}; do
            if curl -f -s --connect-timeout 10 "$PROMETHEUS_URL/-/healthy" > /dev/null 2>&1; then
              echo "✅ 프로메테우스: 정상"
              PROMETHEUS_OK=true
              break
            else
              echo "⏳ 프로메테우스 시작 대기 중..."
              sleep 10
            fi
          done
          
          # 그라파나 헬스체크
          GRAFANA_URL="http://${{ secrets.DUCKDNS_DOMAIN }}:3000"
          echo "🔍 그라파나 헬스체크 ($GRAFANA_URL)..."
          
          for i in {1..6}; do
            if curl -f -s --connect-timeout 10 "$GRAFANA_URL/api/health" > /dev/null 2>&1; then
              echo "✅ 그라파나: 정상"
              GRAFANA_OK=true
              break
            else
              echo "⏳ 그라파나 시작 대기 중..."
              sleep 10
            fi
          done
          
          # 데이터베이스 연결 확인
          if docker ps | grep hospital-mariadb > /dev/null; then
            echo "✅ 데이터베이스: 정상"
          else
            echo "⚠️ 데이터베이스: 확인 필요"
          fi
          
          # DuckDNS 컨테이너 확인
          if docker ps | grep hospital-duckdns > /dev/null; then
            echo "✅ DuckDNS 자동 업데이트: 활성화"
            docker logs hospital-duckdns --tail=5
          else
            echo "⚠️ DuckDNS 자동 업데이트: 비활성화"
          fi
          
          # Node Exporter 확인
          if docker ps | grep node-exporter > /dev/null; then
            echo "✅ Node Exporter: 정상"
          else
            echo "⚠️ Node Exporter: 확인 필요"
          fi
          
          # 최종 결과 출력
          echo ""
          echo "🎉 =========================================="
          echo "    백엔드 배포 및 헬스체크 완료!"
          echo "==========================================="
          echo ""
          echo "📍 접속 정보:"
          echo "  🔧 백엔드 API: http://${{ secrets.DUCKDNS_DOMAIN }}:8888"
          echo "  📊 프로메테우스: http://${{ secrets.DUCKDNS_DOMAIN }}:9090"
          echo "  📈 그라파나: http://${{ secrets.DUCKDNS_DOMAIN }}:3000"
          echo "  🖥️ Node Exporter: http://${{ secrets.DUCKDNS_DOMAIN }}:9100"
          echo "  🌍 DuckDNS 도메인: ${{ secrets.DUCKDNS_DOMAIN }}"
          echo "  📊 데이터베이스: 포트 3500 (내부 접근)"
          echo ""
          echo "🔧 API 테스트 예시:"
          echo "  curl http://${{ secrets.DUCKDNS_DOMAIN }}:8888/api/proDoc/status"
          echo "  curl http://${{ secrets.DUCKDNS_DOMAIN }}:8888/api/list"
          echo ""
          echo "📊 모니터링 접속 정보:"
          echo "  프로메테우스: http://${{ secrets.DUCKDNS_DOMAIN }}:9090"
          echo "  그라파나: http://${{ secrets.DUCKDNS_DOMAIN }}:3000"
          echo "    - 사용자: admin"
          echo "    - 비밀번호: \$GRAFANA_ADMIN_PASSWORD"
          echo ""
          echo "✨ DuckDNS 자동 IP 업데이트와 모니터링이 준비되었습니다!"
          
    - name: 배포 실패 시 롤백 처리
      if: failure()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          echo "❌ 배포 실패! 롤백 시도..."
          
          # 컨테이너 중지
          docker-compose -f /home/ec2-user/docker-compose.prod.yml down || true
          
          # 모니터링 컨테이너 중지
          docker stop prometheus grafana node-exporter cadvisor mysqld-exporter || true
          docker rm prometheus grafana node-exporter cadvisor mysqld-exporter || true
          
          # 최근 로그 확인
          echo "📝 최근 로그:"
          docker-compose -f /home/ec2-user/docker-compose.prod.yml logs --tail=50
          
          # 임시 파일 정리
          rm -f /home/ec2-user/*.tar.gz
          
          echo "🔄 이전 버전으로 롤백하거나 수동으로 문제를 해결하세요."
