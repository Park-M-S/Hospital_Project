name: EC2 배포 (DuckDNS) - Develop

on:
  push:
    branches: [ Develop ]
  workflow_dispatch:

env:
  # 개발 환경용 환경변수
  EC2_HOST: ${{ secrets.DEV_EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    name: 빌드 및 배포 (개발환경)
    runs-on: ubuntu-latest
    
    steps:
    - name: 소스코드 체크아웃
      uses: actions/checkout@v3
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v2
      
    # 디버깅을 위한 디렉토리 구조 확인
    - name: 디렉토리 구조 및 필요 파일 확인
      run: |
        echo "🔍 현재 디렉토리 구조:"
        ls -la
        echo ""
        echo "🔍 hospital_main 디렉토리 확인:"
        if [ -d "hospital_main" ]; then
          ls -la hospital_main/
          echo "✅ hospital_main 디렉토리 존재"
        else
          echo "❌ hospital_main 디렉토리가 없습니다!"
          exit 1
        fi
        
        echo ""
        echo "🔍 필요한 파일들 확인:"
        required_files=("docker-compose.yml" "deploy-dev.sh" "hospital_main/Dockerfile")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file 존재"
          else
            echo "❌ $file 누락!"
            exit 1
          fi
        done
        
    - name: 백엔드 도커 이미지 빌드
      run: |
        cd hospital_main
        echo "🔨 백엔드 Docker 이미지 빌드 중... (개발환경)"
        
        # Dockerfile 존재 확인
        if [ ! -f "Dockerfile" ]; then
          echo "❌ Dockerfile이 존재하지 않습니다!"
          exit 1
        fi
        
        # 빌드 시 더 자세한 로그 출력
        docker build --no-cache --progress=plain -t hospital-backend-dev:${{ github.sha }} . 2>&1 | tee build.log
        
        # 빌드 결과 확인
        if [ $? -eq 0 ]; then
          docker tag hospital-backend-dev:${{ github.sha }} hospital-backend-dev:latest
          echo "✅ 백엔드 이미지 생성 완료 (개발환경)"
          docker images | grep hospital-backend-dev
        else
          echo "❌ Docker 빌드 실패!"
          echo "빌드 로그:"
          cat build.log
          exit 1
        fi
        
    - name: 도커 이미지 압축 및 저장
      run: |
        echo "💾 Docker 이미지 압축 중..."
        
        # 이미지 존재 확인
        if docker images | grep -q hospital-backend-dev:latest; then
          docker save hospital-backend-dev:latest | gzip > backend-dev.tar.gz
          
          # 이미지 크기 확인
          ls -lh *.tar.gz
          echo "✅ 이미지 압축 완료"
        else
          echo "❌ hospital-backend-dev:latest 이미지가 존재하지 않습니다!"
          docker images
          exit 1
        fi
        
    - name: 전송할 파일들 존재 확인
      run: |
        echo "📋 전송할 파일들 확인:"
        required_files=("backend-dev.tar.gz" "docker-compose.yml" "deploy-dev.sh")
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file 존재 ($(ls -lh $file | awk '{print $5}'))"
          else
            echo "❌ $file 누락!"
            exit 1
          fi
        done
        
    - name: 배포 파일들을 EC2 서버로 전송
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "backend-dev.tar.gz,docker-compose.yml,deploy-dev.sh"
        target: "/home/ec2-user/"
        timeout: 300s

    - name: EC2 서버 기본 환경 확인 및 설정
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        timeout: 300s
        script: |
          echo "🔍 기본 환경 확인..."
          
          # 전송된 파일들 확인
          echo "📋 전송된 파일 확인:"
          ls -la /home/ec2-user/
          
          # Docker 설치 확인
          if ! command -v docker &> /dev/null; then
            echo "📦 Docker 설치 중..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
            echo "✅ Docker 설치 완료"
          else
            echo "✅ Docker 이미 설치됨: $(docker --version)"
          fi
          
          # Docker Compose 설치 확인
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 Docker Compose 설치 중..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "✅ Docker Compose 설치 완료"
          else
            echo "✅ Docker Compose 이미 설치됨: $(docker-compose --version)"
          fi
        
    - name: EC2 서버에 DuckDNS로 배포 (개발환경)
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: GITHUB_SHA
        timeout: 300s
        script: |
          echo "🚀 병원 프로젝트 DuckDNS 배포 시작... (개발환경)"
          
          # 필수 파일 존재 확인
          required_files=("/home/ec2-user/backend-dev.tar.gz" "/home/ec2-user/docker-compose.yml" "/home/ec2-user/deploy-dev.sh")
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file 존재"
            else
              echo "❌ $file 누락!"
              exit 1
            fi
          done
          
          # Docker 이미지 로드
          echo "📦 Docker 이미지 로드 중..."
          if docker load < /home/ec2-user/backend-dev.tar.gz; then
            echo "✅ Docker 이미지 로드 완료"
            docker images | grep hospital-backend-dev
          else
            echo "❌ Docker 이미지 로드 실패"
            exit 1
          fi
          
          # 필요한 디렉토리 생성
          sudo mkdir -p /opt/hospital/config/duckdns
          sudo chown -R ec2-user:ec2-user /opt/hospital/
          
          # .env 파일 생성 (개발환경) - 중복 제거
          cat > .env << EOF
          ENVIRONMENT=development
          IMAGE_TAG=latest
          
          # 백엔드 설정
          BACKEND_HOST=hospital-backend-dev
          BACKEND_PORT=8888
          
          # 데이터베이스 설정
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=3501
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          
          # DuckDNS 설정 (개발환경)
          DUCKDNS_DOMAIN=${{ secrets.DEV_DUCKDNS_DOMAIN }}
          DUCKDNS_SUBDOMAIN=${{ secrets.DEV_DUCKDNS_SUBDOMAIN }}
          DUCKDNS_TOKEN=${{ secrets.DUCKDNS_TOKEN }}
          
          # 병원/약국 API 키 설정
          HOSPITAL_MAIN_API_KEY=${{ secrets.HOSPITAL_MAIN_API_KEY }}
          HOSPITAL_DETAIL_API_KEY=${{ secrets.HOSPITAL_DETAIL_API_KEY }}
          HOSPITAL_MEDICAL_SUBJECT_API_KEY=${{ secrets.HOSPITAL_MEDICAL_SUBJECT_API_KEY }}
          HOSPITAL_PRODOC_API_KEY=${{ secrets.HOSPITAL_PRODOC_API_KEY }}
          HOSPITAL_PHARMACY_API_KEY=${{ secrets.HOSPITAL_PHARMACY_API_KEY }}
          HOSPITAL_EMERGENCY_API_KEY=${{ secrets.HOSPITAL_EMERGENCY_API_KEY }}
          API_ADMIN_KEY=${{ secrets.API_ADMIN_KEY }}
          
          # 병원/약국 API Base URL 설정
          HOSPITAL_MAIN_API_BASE_URL=${{ secrets.HOSPITAL_MAIN_API_BASE_URL }}
          HOSPITAL_DETAIL_API_BASE_URL=${{ secrets.HOSPITAL_DETAIL_API_BASE_URL }}
          HOSPITAL_MEDICAL_SUBJECT_API_BASE_URL=${{ secrets.HOSPITAL_MEDICAL_SUBJECT_API_BASE_URL }}
          HOSPITAL_PRODOC_API_BASE_URL=${{ secrets.HOSPITAL_PRODOC_API_BASE_URL }}
          HOSPITAL_PHARMACY_API_BASE_URL=${{ secrets.HOSPITAL_PHARMACY_API_BASE_URL }}
          HOSPITAL_EMERGENCY_API_BASE_URL=${{ secrets.HOSPITAL_EMERGENCY_API_BASE_URL }}
          
          EOF
           
          # 환경변수 확인
          echo "📋 배포 환경 설정:"
          echo "  환경: development"
          echo "  DuckDNS 도메인: ${{ secrets.DEV_DUCKDNS_DOMAIN }}"
          echo "  DuckDNS 서브도메인: ${{ secrets.DEV_DUCKDNS_SUBDOMAIN }}"
          echo "  백엔드 포트: 8888"
          echo "  DB 포트: 3501"
          
          # 배포 스크립트 실행 권한 부여 및 내용 확인
          chmod +x /home/ec2-user/deploy-dev.sh
          
          # 스크립트 내용 일부 확인 (디버깅용)
          echo "📝 배포 스크립트 첫 10줄:"
          head -10 /home/ec2-user/deploy-dev.sh
          
          # 배포 실행
          echo "▶️ 배포 스크립트 실행..."
          if /home/ec2-user/deploy-dev.sh; then
            echo "✅ 배포 스크립트 실행 성공"
          else
            echo "❌ 배포 스크립트 실행 실패"
            exit 1
          fi
          
          # 임시 파일 정리
          echo "🧹 임시 파일 정리..."
          rm -f /home/ec2-user/backend-dev.tar.gz
          
          echo "✅ 개발환경 배포 완료!"
          
    - name: 서비스 상태 확인 및 헬스체크
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        timeout: 180s
        script: |
          echo "🏥 서비스 헬스체크 시작... (개발환경)"
          
          # 컨테이너 상태 확인 (올바른 파일명 사용)
          echo "📊 컨테이너 상태:"
          if [ -f /home/ec2-user/docker-compose.yml ]; then
            docker-compose -f /home/ec2-user/docker-compose.yml ps
          else
            echo "❌ docker-compose.yml 파일이 없습니다!"
            docker ps
          fi
          
          # DuckDNS 도메인으로 백엔드 API 확인
          TARGET_URL="http://${{ secrets.DEV_DUCKDNS_DOMAIN }}:8888"
          echo "🔍 백엔드 API 응답 테스트 ($TARGET_URL)..."
          
          BACKEND_OK=false
          for i in {1..12}; do
            echo "  시도 $i/12..."
            
            if curl -f -s --connect-timeout 10 "$TARGET_URL/api/proDoc/status" > /dev/null 2>&1; then
              echo "✅ 백엔드 API: 정상"
              BACKEND_OK=true
              break
            else
              echo "⏳ 백엔드 시작 대기 중..."
              sleep 10
            fi
          done
          
          if [ "$BACKEND_OK" = false ]; then
            echo "⚠️ 백엔드 API 응답 확인 실패"
          fi
          
          # 데이터베이스 연결 확인
          if docker ps | grep hospital-mariadb > /dev/null; then
            echo "✅ 데이터베이스: 정상"
          else
            echo "⚠️ 데이터베이스: 확인 필요"
          fi
          
          # DuckDNS 컨테이너 확인
          if docker ps | grep hospital-duckdns > /dev/null; then
            echo "✅ DuckDNS 자동 업데이트: 활성화"
            docker logs $(docker ps --filter "name=hospital-duckdns" --format "{{.Names}}") --tail=5
          else
            echo "⚠️ DuckDNS 자동 업데이트: 비활성화"
          fi
          
          # 최종 결과 출력
          echo ""
          echo "🎉 =========================================="
          echo "    개발환경 배포 및 헬스체크 완료!"
          echo "==========================================="
          echo ""
          echo "📍 접속 정보:"
          echo "  🔧 백엔드 API: http://${{ secrets.DEV_DUCKDNS_DOMAIN }}:8888"
          echo "  🌍 DuckDNS 도메인: ${{ secrets.DEV_DUCKDNS_DOMAIN }}"
          echo "  📊 데이터베이스: 포트 3501 (내부 접근)"
          echo ""
          echo "🔧 API 테스트 예시:"
          echo "  curl http://${{ secrets.DEV_DUCKDNS_DOMAIN }}:8888/api/proDoc/status"
          echo "  curl http://${{ secrets.DEV_DUCKDNS_DOMAIN }}:8888/api/list"
          echo ""
          echo "✨ 개발환경 DuckDNS 자동 IP 업데이트가 준비되었습니다!"
          
    - name: 배포 실패 시 롤백 처리
      if: failure()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          echo "❌ 개발환경 배포 실패! 롤백 시도..."
          
          # 컨테이너 중지 (올바른 파일명 사용)
          docker-compose -f /home/ec2-user/docker-compose.yml down || true
          
          # 최근 로그 확인
          echo "📝 최근 로그:"
          docker-compose -f /home/ec2-user/docker-compose.yml logs --tail=50 || true
          
          # 임시 파일 정리
          rm -f /home/ec2-user/*.tar.gz
          
          echo "🔄 이전 버전으로 롤백하거나 수동으로 문제를 해결하세요."
