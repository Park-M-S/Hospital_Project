version: '3.8'
services:
  # MariaDB 데이터베이스
  mariadb:
    image: mariadb:10.11
    container_name: hospital-mariadb
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-1234}
      MYSQL_DATABASE: hospital_api_db
      MYSQL_USER: hospitaluser
      MYSQL_PASSWORD: ${DB_PASSWORD:-1234}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${DB_PORT:-3500}:3500"
    volumes:
      - /opt/hospital/data/mariadb:/var/lib/mysql
      - ./mysql-config:/etc/mysql/conf.d:ro
    command: --port=3500 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: unless-stopped
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-1234}"]
      timeout: 5s
      retries: 10
      interval: 10s
      start_period: 30s

  # Spring Boot 백엔드
  backend:
    image: hospital-backend:${IMAGE_TAG:-latest}
    container_name: hospital-backend
    ports:
      - "${BACKEND_PORT:-8888}:8888"
    environment:
      - DB_URL=jdbc:mariadb://mariadb:3500/hospital_api_db?useUnicode=true&characterEncoding=UTF-8
      - DB_USERNAME=root
      - DB_PASSWORD=${DB_PASSWORD:-1234}
      - SPRING_PROFILES_ACTIVE=${ENVIRONMENT:-production}
      # DuckDNS 도메인을 CORS에 추가 (있는 경우에만)
      - ALLOWED_ORIGINS=https://${DUCKDNS_DOMAIN:-localhost},http://localhost:5173
      
      # API 키 환경변수
      - HOSPITAL_MAIN_API_KEY=${HOSPITAL_MAIN_API_KEY}
      - HOSPITAL_DETAIL_API_KEY=${HOSPITAL_DETAIL_API_KEY}
      - HOSPITAL_MEDICAL_SUBJECT_API_KEY=${HOSPITAL_MEDICAL_SUBJECT_API_KEY}
      - HOSPITAL_PRODOC_API_KEY=${HOSPITAL_PRODOC_API_KEY}
      - HOSPITAL_PHARMACY_API_KEY=${HOSPITAL_PHARMACY_API_KEY}
      - HOSPITAL_EMERGENCY_API_KEY=${HOSPITAL_EMERGENCY_API_KEY}
    volumes:
      - /opt/hospital/logs/backend:/app/logs
    depends_on:
      mariadb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - hospital-network
    healthcheck:
      # 수정된 헬스체크: ROOT 컨텍스트 경로 사용 (hospital_main 제거!)
      test: ["CMD", "curl", "-f", "http://localhost:8888/"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 120s

  # Vue.js 프론트엔드 (Caddy + DuckDNS SSL)
  frontend:
    image: hospital-frontend:${IMAGE_TAG:-latest}
    container_name: hospital-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      # 기존 환경변수
      - BACKEND_HOST=${BACKEND_HOST:-hospital-backend}
      - BACKEND_PORT=${BACKEND_PORT:-8888}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      
      # DuckDNS 설정 (선택사항 - 없으면 HTTP 모드)
      - DUCKDNS_DOMAIN=${DUCKDNS_DOMAIN:-}
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN:-}
      - ACME_EMAIL=${ACME_EMAIL:-admin@example.com}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - /opt/hospital/logs/caddy:/var/log/caddy
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - hospital-network
    healthcheck:
      # 수정된 헬스체크: 더 안정적인 방식
      test: ["CMD-SHELL", "curl -f -k https://localhost/ || curl -f http://localhost/"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # DuckDNS IP 자동 업데이트
  duckdns:
    image: linuxserver/duckdns
    container_name: hospital-duckdns
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Seoul
      - SUBDOMAINS=${DUCKDNS_SUBDOMAIN:-hospitalmap}
      - TOKEN=${DUCKDNS_TOKEN:-6828e51a-a9cd-4e03-83f6-d0362c2e4993}
      - LOG_FILE=false
      - UPDATE_IP=true
    volumes:
      - ./duckdns:/config
    restart: unless-stopped
    networks:
      - hospital-network

networks:
  hospital-network:
    driver: bridge

volumes:
  caddy_data:
    driver: local
  caddy_config:
    driver: local
